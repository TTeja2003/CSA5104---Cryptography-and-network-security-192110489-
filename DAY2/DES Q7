#include <stdio.h>
#include <stdint.h>
#include <stdlib.h>

// Initial Permutation (IP) Table
static const int IP[] = {
    58, 50, 42, 34, 26, 18, 10, 2,
    60, 52, 44, 36, 28, 20, 12, 4,
    62, 54, 46, 38, 30, 22, 14, 6,
    64, 56, 48, 40, 32, 24, 16, 8,
    57, 49, 41, 33, 25, 17, 9, 1,
    59, 51, 43, 35, 27, 19, 11, 3,
    61, 53, 45, 37, 29, 21, 13, 5,
    63, 55, 47, 39, 31, 23, 15, 7
};

// Initial Permutation Inverse (IP-1) Table
static const int IP_1[] = {
    40, 8, 48, 16, 56, 24, 64, 32,
    39, 7, 47, 15, 55, 23, 63, 31,
    38, 6, 46, 14, 54, 22, 62, 30,
    37, 5, 45, 13, 53, 21, 61, 29,
    36, 4, 44, 12, 52, 20, 60, 28,
    35, 3, 43, 11, 51, 19, 59, 27,
    34, 2, 42, 10, 50, 18, 58, 26,
    33, 1, 41, 9, 49, 17, 57, 25
};

// Function to perform the initial permutation
void initialPermutation(uint64_t* data) {
    uint64_t result = 0;
    for (int i = 0; i < 64; i++) {
        int bit = (*data >> (63 - IP[i])) & 1;
        result = (result << 1) | bit;
    }
    *data = result;
}

// Function to perform the initial permutation inverse
void initialPermutationInverse(uint64_t* data) {
    uint64_t result = 0;
    for (int i = 0; i < 64; i++) {
        int bit = (*data >> (63 - IP_1[i])) & 1;
        result = (result << 1) | bit;
    }
    *data = result;
}

int main() {
    uint64_t plaintext, key;

    printf("Enter 64-bit plaintext in hexadecimal (without 0x prefix): ");
    scanf("%llx", &plaintext);

    printf("Enter 64-bit key in hexadecimal (without 0x prefix): ");
    scanf("%llx", &key);

    // Perform initial permutation on plaintext and key
    initialPermutation(&plaintext);
    initialPermutation(&key);

    printf("Plaintext after initial permutation: 0x%016llx\n", plaintext);
    printf("Key after initial permutation: 0x%016llx\n", key);

    return 0;
}
