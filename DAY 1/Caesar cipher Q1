#include <stdio.h>
#include <string.h>

// Function to encrypt the given plaintext using the Caesar cipher
char *caesarEncrypt(char *text, int shift) {
    int i;
    for (i = 0; i < strlen(text); i++) {
        if (text[i] >= 'A' && text[i] <= 'Z') {
            text[i] = ((text[i] - 'A' + shift) % 26) + 'A';
        } else if (text[i] >= 'a' && text[i] <= 'z') {
            text[i] = ((text[i] - 'a' + shift) % 26) + 'a';
        }
    }
    return text;
}

// Function to decrypt the given ciphertext using the Caesar cipher
char *caesarDecrypt(char *text, int shift) {
    return caesarEncrypt(text, 26 - shift); // Decrypting is the same as encrypting with the opposite shift
}

int main() {
    char text[100];
    int shift, choice;

    printf("Choose an option:\n");
    printf("1. Encrypt\n");
    printf("2. Decrypt\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);
    getchar(); // Consume the newline character left in the input buffer

    if (choice != 1 && choice != 2) {
        printf("Invalid choice. Please choose 1 for encryption or 2 for decryption.\n");
        return 1;
    }

    printf("Enter text: ");
    fgets(text, sizeof(text), stdin);

    printf("Enter the shift value (1-25): ");
    scanf("%d", &shift);

    if (shift < 1 || shift > 25) {
        printf("Shift value must be between 1 and 25.\n");
        return 1;
    }

    if (choice == 1) {
        printf("Encrypted text: %s\n", caesarEncrypt(text, shift));
    } else {
        printf("Decrypted text: %s\n", caesarDecrypt(text, shift));
    }

    return 0;
}
